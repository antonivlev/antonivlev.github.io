{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Video.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Video from './components/Video.svelte'\n\n\timport { connectSelfAtPostion, generateID } from './services/connections';\n\timport { startVideo, getEffectStream } from './services/video';\n\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher();\n\n\t// add random url at end if needed\n\tif (window.location.pathname === '/') {\n\t\twindow.history.pushState('', '', '/'+Math.random().toString(36).substring(2, 12));\n\t}\n\n\tconst roomURL =  window.location.pathname;\n\tconst server = {\n\t\thost: 'obscure-bastion-48493.herokuapp.com',\n\t\tport: '',\n\t\tpath: '/'\n\t}\n\n\tlet vid;\n\tlet canvas;\n\n\t// Returns my stream, peer instance and position connected at\n\tconst connectSelf = async (roomURL, server) => {\n\t\tfor (let position=0; position<10; position++) {\n\t\t\tlet result = await connectSelfAtPostion(position, roomURL, server);\n\t\t\tif (result.peer) {\n\t\t\t\t\n\t\t\t\tlet stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n\t\t\t\tstartVideo(stream, vid);\n\t\t\t\tstream = getEffectStream(vid, canvas);\n\t\t\t\t\n\t\t\t\tresult.stream = stream;\n\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\tthrow new Error(\"room capacity reached\");\n\t}\n</script>\n\n<div>\n\t<div class=\"me\">\n\t\t<video width=200 height=200 bind:this={vid} muted></video>\n\t\t<canvas width=200 height=200 bind:this={canvas}></canvas>\n\t</div>\n\n\t{#await connectSelf(roomURL, server)}\n\t\t<p>waiting...</p>\n\t{:then me}\n\t\t<p>my id: {generateID(me.position, roomURL)}</p>\n\t\t{#each [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].filter(p => p !== me.position) as position}\n\t\t\t<Video id={generateID(position, roomURL)} peer={me.peer} stream={me.stream} />\n\t\t{/each}\n\t\t\n\t{:catch error}\n\t\t<p>{error.message}</p>\n\t{/await}\n</div>\n\n<style>\n\tdiv {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tjustify-content: center;\n\t\tjustify-content: space-around;\n\t}\n\n\t.me {\n\t\tborder: 1px dashed green;\n\t}\n</style>",
    "<script>\n\timport { onMount } from 'svelte';\n\t\n\texport let id = '';\t\n\texport let stream = null;\n\texport let peer = null;\n\n\tlet vid;\n\tlet canvas;\n\n\tonMount(() => {\n\t\t// call this guy, start video with his stream\n\t\tconst call = peer.call(id, stream);\n\t\tdisplayStreamFromCall(call);\n\n\t\t// if this guy calls, display his video \n\t\tpeer.on('call', incomingCall => {\n\t\t\tincomingCall.answer(stream);\n\t\t\tif (incomingCall.peer === id) {\n\t\t\t\tdisplayStreamFromCall(incomingCall);\n\t\t\t}\n\t\t});\n\t});\n\n\tconst displayStreamFromCall = (call) => {\n\t\tcall.on('stream', remoteStream => {\n\t\t\tvid.srcObject = remoteStream;\n\t\t\tvid.onloadedmetadata = () => vid.play();\n\t\t});\n\t}\n</script>\n\n<div>\n\t{id}\n\t<video width=200 height=200 bind:this={vid}></video>\n\t<canvas width=200 height=200 bind:this={canvas}></canvas>\n</div>\n\n<style>\n\tdiv {\n\t\tdisplay: flex;\n\t\tborder: 3px dashed lightgrey;\n\t\tmargin: 20px 0px;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAgEC,GAAG,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,eAAe,CAAE,MAAM,CACvB,eAAe,CAAE,YAAY,AAC9B,CAAC,AAED,GAAG,eAAC,CAAC,AACJ,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,KAAK,AACzB,CAAC;AClCD,GAAG,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,SAAS,CAC5B,MAAM,CAAE,IAAI,CAAC,GAAG,AACjB,CAAC"
}