{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Video.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport seedrandom from 'seedrandom';\n\n\timport Video from './components/Video.svelte'\n\timport Test from './components/Test.svelte'\n\n\tconst generateID = (position, roomURL) => {\n\t\tconst rng = seedrandom(roomURL+position);\n\t\tconst id = rng();\n\t\treturn id.toString(36).substring(2, 12);\n\t}\n\n\t// Tries to connect to server at position. Creates peer if position available.\n\t// returns occupantList, myPeer\n\tconst tryPosition = (position, roomURL, server) => {\n\t\treturn new Promise( (resolve, reject) => {\n\t\t\tconst occupantID = generateID(position, roomURL);\n\t\t\tconst peer = new Peer(occupantID, server)\n\t\t\t\t.on('open', async id => {\n\t\t\t\t\t// id available\n\t\t\t\t\tresolve( {id: occupantID, myPeer: peer} );\n\t\t\t\t})\n\t\t\t\t.on('error', err => {\n\t\t\t\t\tif (err.message.includes('is taken')) {\n\t\t\t\t\t\t// id not available\n\t\t\t\t\t\tresolve( {id: occupantID, myPeer: null} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// other error\n\t\t\t\t\t\treject( {message: err + ' position: ' + position + ', id: ' + occupantID} );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\tconst connectToRoom = async (roomURL, server) => {\n\t\tlet occupants = [];\n\t\tlet position = 0;\n\n\t\tlet idFound = false;\n\n\t\twhile (position < 20) {\n\t\t\t// once id is found, stop taking other positions \n\t\t\tconst occupant = idFound ? {id: generateID(position, roomURL), myPeer: null} : await tryPosition(position, roomURL, server);\n\t\t\tif (occupant.myPeer) {\n\t\t\t\tidFound = true;\n\t\t\t}\n\t\t\toccupants.push(occupant);\n\t\t\tposition += 1;\n\t\t}\n\t\tconst me = occupants.find(occ => occ.myPeer);\n\t\tconsole.log(occupants);\n\n\t\t// set up call accepting and get my stream\n\t\tlet myStream = await setupPeer(me.myPeer);\n\t\tme.stream = myStream;\n\n\t\t// call everyone but me\n\t\toccupants.filter(occ => !occ.myPeer).map( occ => {\n\t\t\tconst call = me.myPeer.call(occ.id, myStream);\n\t\t\tcall.on( 'stream', remoteStream => addCallerStream(occ.id, remoteStream) );\n\t\t});\n\n\t\treturn occupants;\n\t}\n\n\tconst setupPeer = async (peer) => {\n\t\tconst stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n\n\t\t// setup call answering behaviour\n\t\tpeer.on('call', call => {\n\t\t\tcall.answer(stream);\n\t\t\tcall.on( 'stream', remoteStream => addCallerStream(call.peer, remoteStream) );\n\t\t});\n\n\t\treturn stream;\n\t}\n\n\tconst addCallerStream = async (id, stream) => {\n\t\t// todo: make side effects more transparent\n\t\tconst currentOccupants = await occupants;\n\t\t\n\t\tconst exisitngCaller = currentOccupants.find(occ => occ.id === id);\n\t\tif (exisitngCaller) {\n\t\t\texisitngCaller.stream = stream;\n\t\t\toccupants = [...currentOccupants];\n\t\t\treturn;\n\t\t}\n\n\t\t// else, add occupant\n\t\toccupants = [...currentOccupants, {id: id, me: false, stream: stream}];\n\t}\n\n\tif (window.location.pathname === '/') {\n\t\twindow.history.pushState('', '', '/'+Math.random().toString(36).substring(2, 12));\n\t}\n\n\tconst roomURL =  window.location.pathname;\n\tconst server = {\n\t\thost: '030542a71cf2.ngrok.io',\n\t\tport: '',\n\t\tpath: '/myapp'\n\t}\n\tlet occupants = [];\n\n\toccupants = connectToRoom(roomURL, server);\n</script>\n\n<div>\n\t<!-- <Test /> -->\n\t{#await occupants}\n\t\t<p>waiting...</p>\n\t{:then occupants}\n\t\t\n\t\t{#each occupants as occupant}\n\t\t\t<Video id={occupant.id} me={occupant.myPeer} stream={occupant.stream} />\n\t\t{/each}\n\t\t\n\t{:catch error}\n\t\t<p>{error.message}</p>\n\t{/await}\n</div>\n\n<style>\n\tdiv {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tjustify-content: center;\n\t\tjustify-content: space-around;\n\t}\n</style>",
    "<script>\n\timport { createEventDispatcher } from 'svelte';\n\timport { onMount, afterUpdate } from 'svelte';\n\n\texport let id = 'some-id';\t\n\texport let me = false;\n\texport let stream;\n\n\tlet vid;\n\tonMount(() => {\n\t\tvid.srcObject = stream;\n\t\tvid.onloadedmetadata = () => vid.play();\n\t});\n\n\tafterUpdate(() => {\n\t\tvid.srcObject = stream;\n\t\tvid.onloadedmetadata = () => vid.play();\n\t});\n</script>\n\n<div id={id} class={me ? 'me' : ''} style={stream ? '' : 'display: none'}>\n\t{id}\n\t<video bind:this={vid} muted={me ? true : false}></video>\n</div>\n\n<style>\n\tdiv {\n\t\tdisplay: flex;\n\t\tborder: 3px dashed lightgrey;\n\t\twidth: 480px;\n\t\theight: 240px;\n\t\tmargin: 20px 0px;\n\t}\n\n\tvideo {\n\t\theight: inherit;\n\t}\n\n\t.me {\n\t\tborder-color: green;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AA2HC,GAAG,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,eAAe,CAAE,MAAM,CACvB,eAAe,CAAE,YAAY,AAC9B,CAAC;ACtGD,GAAG,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,SAAS,CAC5B,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,IAAI,CAAC,GAAG,AACjB,CAAC,AAED,KAAK,cAAC,CAAC,AACN,MAAM,CAAE,OAAO,AAChB,CAAC,AAED,GAAG,cAAC,CAAC,AACJ,YAAY,CAAE,KAAK,AACpB,CAAC"
}